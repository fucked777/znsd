//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `MDSmutualMPS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <MDSmutualMPS.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 5
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_MDScallMPSService_LoginServiceProxy_ids[2] =
{
    "::Ice::Object",
    "::MDScallMPSService::LoginServiceProxy"
};
const ::std::string iceC_MDScallMPSService_LoginServiceProxy_ops[] =
{
    "LoginAuthentication",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name = "LoginAuthentication";

const ::std::string iceC_MDScallMPSService_RegisterService_ids[2] =
{
    "::Ice::Object",
    "::MDScallMPSService::RegisterService"
};
const ::std::string iceC_MDScallMPSService_RegisterService_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerModule",
    "requestImage"
};
const ::std::string iceC_MDScallMPSService_RegisterService_registerModule_name = "registerModule";
const ::std::string iceC_MDScallMPSService_RegisterService_requestImage_name = "requestImage";

const ::std::string iceC_MPScallMDSService_MDSService_ids[2] =
{
    "::Ice::Object",
    "::MPScallMDSService::MDSService"
};
const ::std::string iceC_MPScallMDSService_MDSService_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "imageReady",
    "pushErrorLog",
    "pushSatPlatPara",
    "pushSysOperPara",
    "pushTaskInfo",
    "pushUtcTime"
};
const ::std::string iceC_MPScallMDSService_MDSService_pushUtcTime_name = "pushUtcTime";
const ::std::string iceC_MPScallMDSService_MDSService_pushSysOperPara_name = "pushSysOperPara";
const ::std::string iceC_MPScallMDSService_MDSService_pushSatPlatPara_name = "pushSatPlatPara";
const ::std::string iceC_MPScallMDSService_MDSService_pushTaskInfo_name = "pushTaskInfo";
const ::std::string iceC_MPScallMDSService_MDSService_imageReady_name = "imageReady";
const ::std::string iceC_MPScallMDSService_MDSService_pushErrorLog_name = "pushErrorLog";

}

bool
MDScallMPSService::LoginServiceProxy::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MDScallMPSService_LoginServiceProxy_ids, iceC_MDScallMPSService_LoginServiceProxy_ids + 2, s);
}

::std::vector<::std::string>
MDScallMPSService::LoginServiceProxy::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MDScallMPSService_LoginServiceProxy_ids[0], &iceC_MDScallMPSService_LoginServiceProxy_ids[2]);
}

::std::string
MDScallMPSService::LoginServiceProxy::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MDScallMPSService::LoginServiceProxy::ice_staticId()
{
    static const ::std::string typeId = "::MDScallMPSService::LoginServiceProxy";
    return typeId;
}

/// \cond INTERNAL
bool
MDScallMPSService::LoginServiceProxy::_iceD_LoginAuthentication(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->readAll(iceP_user, iceP_password);
    inS.endReadParams();
    bool ret = this->LoginAuthentication(::std::move(iceP_user), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MDScallMPSService::LoginServiceProxy::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MDScallMPSService_LoginServiceProxy_ops, iceC_MDScallMPSService_LoginServiceProxy_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MDScallMPSService_LoginServiceProxy_ops)
    {
        case 0:
        {
            return _iceD_LoginAuthentication(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
MDScallMPSService::RegisterService::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MDScallMPSService_RegisterService_ids, iceC_MDScallMPSService_RegisterService_ids + 2, s);
}

::std::vector<::std::string>
MDScallMPSService::RegisterService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MDScallMPSService_RegisterService_ids[0], &iceC_MDScallMPSService_RegisterService_ids[2]);
}

::std::string
MDScallMPSService::RegisterService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MDScallMPSService::RegisterService::ice_staticId()
{
    static const ::std::string typeId = "::MDScallMPSService::RegisterService";
    return typeId;
}

/// \cond INTERNAL
bool
MDScallMPSService::RegisterService::_iceD_registerModule(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_modulename;
    ::std::string iceP_host;
    istr->readAll(iceP_modulename, iceP_host);
    inS.endReadParams();
    bool ret = this->registerModule(::std::move(iceP_modulename), ::std::move(iceP_host), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MDScallMPSService::RegisterService::_iceD_requestImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_branchcode;
    ::std::string iceP_type;
    int iceP_left;
    int iceP_right;
    int iceP_top;
    int iceP_bottom;
    int iceP_width;
    int iceP_height;
    istr->readAll(iceP_branchcode, iceP_type, iceP_left, iceP_right, iceP_top, iceP_bottom, iceP_width, iceP_height);
    inS.endReadParams();
    ImageData ret = this->requestImage(::std::move(iceP_branchcode), ::std::move(iceP_type), iceP_left, iceP_right, iceP_top, iceP_bottom, iceP_width, iceP_height, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MDScallMPSService::RegisterService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MDScallMPSService_RegisterService_ops, iceC_MDScallMPSService_RegisterService_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MDScallMPSService_RegisterService_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_registerModule(in, current);
        }
        case 5:
        {
            return _iceD_requestImage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
MPScallMDSService::MDSService::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPScallMDSService_MDSService_ids, iceC_MPScallMDSService_MDSService_ids + 2, s);
}

::std::vector<::std::string>
MPScallMDSService::MDSService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MPScallMDSService_MDSService_ids[0], &iceC_MPScallMDSService_MDSService_ids[2]);
}

::std::string
MPScallMDSService::MDSService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPScallMDSService::MDSService::ice_staticId()
{
    static const ::std::string typeId = "::MPScallMDSService::MDSService";
    return typeId;
}

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushUtcTime(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_time;
    istr->readAll(iceP_time);
    inS.endReadParams();
    this->pushUtcTime(::std::move(iceP_time), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushSysOperPara(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SysOperPara iceP_para;
    istr->readAll(iceP_para);
    inS.endReadParams();
    this->pushSysOperPara(::std::move(iceP_para), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushSatPlatPara(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SatPlatPara iceP_para;
    istr->readAll(iceP_para);
    inS.endReadParams();
    this->pushSatPlatPara(::std::move(iceP_para), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushTaskInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_branchCode;
    TasksData iceP_tasks;
    istr->readAll(iceP_branchCode, iceP_tasks);
    inS.endReadParams();
    this->pushTaskInfo(::std::move(iceP_branchCode), ::std::move(iceP_tasks), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_imageReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_type;
    istr->readAll(iceP_type);
    inS.endReadParams();
    this->imageReady(::std::move(iceP_type), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushErrorLog(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ErrorLog iceP_log;
    istr->readAll(iceP_log);
    inS.endReadParams();
    this->pushErrorLog(::std::move(iceP_log), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPScallMDSService_MDSService_ops, iceC_MPScallMDSService_MDSService_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPScallMDSService_MDSService_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_imageReady(in, current);
        }
        case 5:
        {
            return _iceD_pushErrorLog(in, current);
        }
        case 6:
        {
            return _iceD_pushSatPlatPara(in, current);
        }
        case 7:
        {
            return _iceD_pushSysOperPara(in, current);
        }
        case 8:
        {
            return _iceD_pushTaskInfo(in, current);
        }
        case 9:
        {
            return _iceD_pushUtcTime(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
MDScallMPSService::LoginServiceProxyPrx::_iceI_LoginAuthentication(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name);
    outAsync->invoke(iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user, iceP_password);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MDScallMPSService::LoginServiceProxyPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LoginServiceProxyPrx>();
}
/// \endcond

const ::std::string&
MDScallMPSService::LoginServiceProxyPrx::ice_staticId()
{
    return LoginServiceProxy::ice_staticId();
}

/// \cond INTERNAL
void
MDScallMPSService::RegisterServicePrx::_iceI_registerModule(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_modulename, const ::std::string& iceP_host, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MDScallMPSService_RegisterService_registerModule_name);
    outAsync->invoke(iceC_MDScallMPSService_RegisterService_registerModule_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_modulename, iceP_host);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MDScallMPSService::RegisterServicePrx::_iceI_requestImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MDScallMPSService::ImageData>>& outAsync, const ::std::string& iceP_branchcode, const ::std::string& iceP_type, int iceP_left, int iceP_right, int iceP_top, int iceP_bottom, int iceP_width, int iceP_height, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MDScallMPSService_RegisterService_requestImage_name);
    outAsync->invoke(iceC_MDScallMPSService_RegisterService_requestImage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_branchcode, iceP_type, iceP_left, iceP_right, iceP_top, iceP_bottom, iceP_width, iceP_height);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MDScallMPSService::RegisterServicePrx::_newInstance() const
{
    return ::IceInternal::createProxy<RegisterServicePrx>();
}
/// \endcond

const ::std::string&
MDScallMPSService::RegisterServicePrx::ice_staticId()
{
    return RegisterService::ice_staticId();
}

/// \cond INTERNAL
void
MPScallMDSService::MDSServicePrx::_iceI_pushUtcTime(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_time, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPScallMDSService_MDSService_pushUtcTime_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_time);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPScallMDSService::MDSServicePrx::_iceI_pushSysOperPara(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const SysOperPara& iceP_para, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPScallMDSService_MDSService_pushSysOperPara_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_para);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPScallMDSService::MDSServicePrx::_iceI_pushSatPlatPara(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const SatPlatPara& iceP_para, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPScallMDSService_MDSService_pushSatPlatPara_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_para);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPScallMDSService::MDSServicePrx::_iceI_pushTaskInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_branchCode, const TasksData& iceP_tasks, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPScallMDSService_MDSService_pushTaskInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_branchCode, iceP_tasks);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPScallMDSService::MDSServicePrx::_iceI_imageReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_type, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPScallMDSService_MDSService_imageReady_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_type);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPScallMDSService::MDSServicePrx::_iceI_pushErrorLog(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ErrorLog& iceP_log, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPScallMDSService_MDSService_pushErrorLog_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_log);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MPScallMDSService::MDSServicePrx::_newInstance() const
{
    return ::IceInternal::createProxy<MDSServicePrx>();
}
/// \endcond

const ::std::string&
MPScallMDSService::MDSServicePrx::ice_staticId()
{
    return MDSService::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name = "LoginAuthentication";

const ::std::string iceC_MDScallMPSService_RegisterService_registerModule_name = "registerModule";

const ::std::string iceC_MDScallMPSService_RegisterService_requestImage_name = "requestImage";

}

namespace
{

const ::std::string iceC_MPScallMDSService_MDSService_pushUtcTime_name = "pushUtcTime";

const ::std::string iceC_MPScallMDSService_MDSService_pushSysOperPara_name = "pushSysOperPara";

const ::std::string iceC_MPScallMDSService_MDSService_pushSatPlatPara_name = "pushSatPlatPara";

const ::std::string iceC_MPScallMDSService_MDSService_pushTaskInfo_name = "pushTaskInfo";

const ::std::string iceC_MPScallMDSService_MDSService_imageReady_name = "imageReady";

const ::std::string iceC_MPScallMDSService_MDSService_pushErrorLog_name = "pushErrorLog";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MDScallMPSService::upCast(LoginServiceProxy* p) { return p; }

void
::IceProxy::MDScallMPSService::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< LoginServiceProxy>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new LoginServiceProxy;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MDScallMPSService::LoginServiceProxy::_iceI_begin_LoginAuthentication(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::MDScallMPSService::LoginServiceProxy::end_LoginAuthentication(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MDScallMPSService_LoginServiceProxy_LoginAuthentication_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MDScallMPSService::LoginServiceProxy::_newInstance() const
{
    return new LoginServiceProxy;
}
/// \endcond

const ::std::string&
IceProxy::MDScallMPSService::LoginServiceProxy::ice_staticId()
{
    return ::MDScallMPSService::LoginServiceProxy::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MDScallMPSService::upCast(RegisterService* p) { return p; }

void
::IceProxy::MDScallMPSService::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< RegisterService>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new RegisterService;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MDScallMPSService::RegisterService::_iceI_begin_registerModule(const ::std::string& iceP_modulename, const ::std::string& iceP_host, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MDScallMPSService_RegisterService_registerModule_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MDScallMPSService_RegisterService_registerModule_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MDScallMPSService_RegisterService_registerModule_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_modulename);
        ostr->write(iceP_host);
        result->endWriteParams();
        result->invoke(iceC_MDScallMPSService_RegisterService_registerModule_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::MDScallMPSService::RegisterService::end_registerModule(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MDScallMPSService_RegisterService_registerModule_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MDScallMPSService::RegisterService::_iceI_begin_requestImage(const ::std::string& iceP_branchcode, const ::std::string& iceP_type, ::Ice::Int iceP_left, ::Ice::Int iceP_right, ::Ice::Int iceP_top, ::Ice::Int iceP_bottom, ::Ice::Int iceP_width, ::Ice::Int iceP_height, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MDScallMPSService_RegisterService_requestImage_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MDScallMPSService_RegisterService_requestImage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MDScallMPSService_RegisterService_requestImage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_branchcode);
        ostr->write(iceP_type);
        ostr->write(iceP_left);
        ostr->write(iceP_right);
        ostr->write(iceP_top);
        ostr->write(iceP_bottom);
        ostr->write(iceP_width);
        ostr->write(iceP_height);
        result->endWriteParams();
        result->invoke(iceC_MDScallMPSService_RegisterService_requestImage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MDScallMPSService::ImageData
IceProxy::MDScallMPSService::RegisterService::end_requestImage(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MDScallMPSService_RegisterService_requestImage_name);
    ::MDScallMPSService::ImageData ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MDScallMPSService::RegisterService::_newInstance() const
{
    return new RegisterService;
}
/// \endcond

const ::std::string&
IceProxy::MDScallMPSService::RegisterService::ice_staticId()
{
    return ::MDScallMPSService::RegisterService::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MPScallMDSService::upCast(MDSService* p) { return p; }

void
::IceProxy::MPScallMDSService::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MDSService>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MDSService;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MPScallMDSService::MDSService::_iceI_begin_pushUtcTime(const ::std::string& iceP_time, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPScallMDSService_MDSService_pushUtcTime_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPScallMDSService_MDSService_pushUtcTime_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_time);
        result->endWriteParams();
        result->invoke(iceC_MPScallMDSService_MDSService_pushUtcTime_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPScallMDSService::MDSService::end_pushUtcTime(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPScallMDSService_MDSService_pushUtcTime_name);
}

::Ice::AsyncResultPtr
IceProxy::MPScallMDSService::MDSService::_iceI_begin_pushSysOperPara(const ::MPScallMDSService::SysOperPara& iceP_para, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPScallMDSService_MDSService_pushSysOperPara_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPScallMDSService_MDSService_pushSysOperPara_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_para);
        result->endWriteParams();
        result->invoke(iceC_MPScallMDSService_MDSService_pushSysOperPara_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPScallMDSService::MDSService::end_pushSysOperPara(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPScallMDSService_MDSService_pushSysOperPara_name);
}

::Ice::AsyncResultPtr
IceProxy::MPScallMDSService::MDSService::_iceI_begin_pushSatPlatPara(const ::MPScallMDSService::SatPlatPara& iceP_para, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPScallMDSService_MDSService_pushSatPlatPara_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPScallMDSService_MDSService_pushSatPlatPara_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_para);
        result->endWriteParams();
        result->invoke(iceC_MPScallMDSService_MDSService_pushSatPlatPara_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPScallMDSService::MDSService::end_pushSatPlatPara(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPScallMDSService_MDSService_pushSatPlatPara_name);
}

::Ice::AsyncResultPtr
IceProxy::MPScallMDSService::MDSService::_iceI_begin_pushTaskInfo(const ::std::string& iceP_branchCode, const ::MPScallMDSService::TasksData& iceP_tasks, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPScallMDSService_MDSService_pushTaskInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPScallMDSService_MDSService_pushTaskInfo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_branchCode);
        ostr->write(iceP_tasks);
        result->endWriteParams();
        result->invoke(iceC_MPScallMDSService_MDSService_pushTaskInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPScallMDSService::MDSService::end_pushTaskInfo(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPScallMDSService_MDSService_pushTaskInfo_name);
}

::Ice::AsyncResultPtr
IceProxy::MPScallMDSService::MDSService::_iceI_begin_imageReady(const ::std::string& iceP_type, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPScallMDSService_MDSService_imageReady_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPScallMDSService_MDSService_imageReady_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_type);
        result->endWriteParams();
        result->invoke(iceC_MPScallMDSService_MDSService_imageReady_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPScallMDSService::MDSService::end_imageReady(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPScallMDSService_MDSService_imageReady_name);
}

::Ice::AsyncResultPtr
IceProxy::MPScallMDSService::MDSService::_iceI_begin_pushErrorLog(const ::MPScallMDSService::ErrorLog& iceP_log, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPScallMDSService_MDSService_pushErrorLog_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPScallMDSService_MDSService_pushErrorLog_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_log);
        result->endWriteParams();
        result->invoke(iceC_MPScallMDSService_MDSService_pushErrorLog_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPScallMDSService::MDSService::end_pushErrorLog(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPScallMDSService_MDSService_pushErrorLog_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MPScallMDSService::MDSService::_newInstance() const
{
    return new MDSService;
}
/// \endcond

const ::std::string&
IceProxy::MPScallMDSService::MDSService::ice_staticId()
{
    return ::MPScallMDSService::MDSService::ice_staticId();
}

MDScallMPSService::LoginServiceProxy::~LoginServiceProxy()
{
}

/// \cond INTERNAL
::Ice::Object* MDScallMPSService::upCast(LoginServiceProxy* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MDScallMPSService_LoginServiceProxy_ids[2] =
{
    "::Ice::Object",
    "::MDScallMPSService::LoginServiceProxy"
};

}

bool
MDScallMPSService::LoginServiceProxy::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MDScallMPSService_LoginServiceProxy_ids, iceC_MDScallMPSService_LoginServiceProxy_ids + 2, s);
}

::std::vector< ::std::string>
MDScallMPSService::LoginServiceProxy::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MDScallMPSService_LoginServiceProxy_ids[0], &iceC_MDScallMPSService_LoginServiceProxy_ids[2]);
}

const ::std::string&
MDScallMPSService::LoginServiceProxy::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MDScallMPSService::LoginServiceProxy::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MDScallMPSService::LoginServiceProxy";
    return typeId;
#else
    return iceC_MDScallMPSService_LoginServiceProxy_ids[1];
#endif
}

/// \cond INTERNAL
bool
MDScallMPSService::LoginServiceProxy::_iceD_LoginAuthentication(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->read(iceP_user);
    istr->read(iceP_password);
    inS.endReadParams();
    bool ret = this->LoginAuthentication(iceP_user, iceP_password, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MDScallMPSService_LoginServiceProxy_all[] =
{
    "LoginAuthentication",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
MDScallMPSService::LoginServiceProxy::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MDScallMPSService_LoginServiceProxy_all, iceC_MDScallMPSService_LoginServiceProxy_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MDScallMPSService_LoginServiceProxy_all)
    {
        case 0:
        {
            return _iceD_LoginAuthentication(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MDScallMPSService::LoginServiceProxy::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< LoginServiceProxy, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MDScallMPSService::LoginServiceProxy::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< LoginServiceProxy, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MDScallMPSService::_icePatchObjectPtr(LoginServiceProxyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LoginServiceProxyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(LoginServiceProxy::ice_staticId(), v);
    }
}
/// \endcond

MDScallMPSService::RegisterService::~RegisterService()
{
}

/// \cond INTERNAL
::Ice::Object* MDScallMPSService::upCast(RegisterService* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MDScallMPSService_RegisterService_ids[2] =
{
    "::Ice::Object",
    "::MDScallMPSService::RegisterService"
};

}

bool
MDScallMPSService::RegisterService::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MDScallMPSService_RegisterService_ids, iceC_MDScallMPSService_RegisterService_ids + 2, s);
}

::std::vector< ::std::string>
MDScallMPSService::RegisterService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MDScallMPSService_RegisterService_ids[0], &iceC_MDScallMPSService_RegisterService_ids[2]);
}

const ::std::string&
MDScallMPSService::RegisterService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MDScallMPSService::RegisterService::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MDScallMPSService::RegisterService";
    return typeId;
#else
    return iceC_MDScallMPSService_RegisterService_ids[1];
#endif
}

/// \cond INTERNAL
bool
MDScallMPSService::RegisterService::_iceD_registerModule(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_modulename;
    ::std::string iceP_host;
    istr->read(iceP_modulename);
    istr->read(iceP_host);
    inS.endReadParams();
    bool ret = this->registerModule(iceP_modulename, iceP_host, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MDScallMPSService::RegisterService::_iceD_requestImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_branchcode;
    ::std::string iceP_type;
    ::Ice::Int iceP_left;
    ::Ice::Int iceP_right;
    ::Ice::Int iceP_top;
    ::Ice::Int iceP_bottom;
    ::Ice::Int iceP_width;
    ::Ice::Int iceP_height;
    istr->read(iceP_branchcode);
    istr->read(iceP_type);
    istr->read(iceP_left);
    istr->read(iceP_right);
    istr->read(iceP_top);
    istr->read(iceP_bottom);
    istr->read(iceP_width);
    istr->read(iceP_height);
    inS.endReadParams();
    ImageData ret = this->requestImage(iceP_branchcode, iceP_type, iceP_left, iceP_right, iceP_top, iceP_bottom, iceP_width, iceP_height, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MDScallMPSService_RegisterService_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerModule",
    "requestImage"
};

}

/// \cond INTERNAL
bool
MDScallMPSService::RegisterService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MDScallMPSService_RegisterService_all, iceC_MDScallMPSService_RegisterService_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MDScallMPSService_RegisterService_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_registerModule(in, current);
        }
        case 5:
        {
            return _iceD_requestImage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MDScallMPSService::RegisterService::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< RegisterService, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MDScallMPSService::RegisterService::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RegisterService, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MDScallMPSService::_icePatchObjectPtr(RegisterServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RegisterServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(RegisterService::ice_staticId(), v);
    }
}
/// \endcond

MPScallMDSService::MDSService::~MDSService()
{
}

/// \cond INTERNAL
::Ice::Object* MPScallMDSService::upCast(MDSService* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MPScallMDSService_MDSService_ids[2] =
{
    "::Ice::Object",
    "::MPScallMDSService::MDSService"
};

}

bool
MPScallMDSService::MDSService::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPScallMDSService_MDSService_ids, iceC_MPScallMDSService_MDSService_ids + 2, s);
}

::std::vector< ::std::string>
MPScallMDSService::MDSService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MPScallMDSService_MDSService_ids[0], &iceC_MPScallMDSService_MDSService_ids[2]);
}

const ::std::string&
MPScallMDSService::MDSService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPScallMDSService::MDSService::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MPScallMDSService::MDSService";
    return typeId;
#else
    return iceC_MPScallMDSService_MDSService_ids[1];
#endif
}

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushUtcTime(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_time;
    istr->read(iceP_time);
    inS.endReadParams();
    this->pushUtcTime(iceP_time, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushSysOperPara(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SysOperPara iceP_para;
    istr->read(iceP_para);
    inS.endReadParams();
    this->pushSysOperPara(iceP_para, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushSatPlatPara(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SatPlatPara iceP_para;
    istr->read(iceP_para);
    inS.endReadParams();
    this->pushSatPlatPara(iceP_para, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushTaskInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_branchCode;
    TasksData iceP_tasks;
    istr->read(iceP_branchCode);
    istr->read(iceP_tasks);
    inS.endReadParams();
    this->pushTaskInfo(iceP_branchCode, iceP_tasks, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_imageReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_type;
    istr->read(iceP_type);
    inS.endReadParams();
    this->imageReady(iceP_type, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceD_pushErrorLog(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ErrorLog iceP_log;
    istr->read(iceP_log);
    inS.endReadParams();
    this->pushErrorLog(iceP_log, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MPScallMDSService_MDSService_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "imageReady",
    "pushErrorLog",
    "pushSatPlatPara",
    "pushSysOperPara",
    "pushTaskInfo",
    "pushUtcTime"
};

}

/// \cond INTERNAL
bool
MPScallMDSService::MDSService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPScallMDSService_MDSService_all, iceC_MPScallMDSService_MDSService_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPScallMDSService_MDSService_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_imageReady(in, current);
        }
        case 5:
        {
            return _iceD_pushErrorLog(in, current);
        }
        case 6:
        {
            return _iceD_pushSatPlatPara(in, current);
        }
        case 7:
        {
            return _iceD_pushSysOperPara(in, current);
        }
        case 8:
        {
            return _iceD_pushTaskInfo(in, current);
        }
        case 9:
        {
            return _iceD_pushUtcTime(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MPScallMDSService::MDSService::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MDSService, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPScallMDSService::MDSService::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MDSService, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MPScallMDSService::_icePatchObjectPtr(MDSServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MDSServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MDSService::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

namespace Ice
{
}

#endif
